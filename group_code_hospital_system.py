# -*- coding: utf-8 -*-
"""group code hospital system

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9z79WK820Jl-UYvyTYWlOP-4Oa_Vao2
"""

class Patient:
    def __init__(self, name, dob, medical_history, current_condition):
        self._name = name  # Initialize patient's name
        self._dob = dob  # Initialize patient's date of birth
        self._medical_history = medical_history  # Initialize patient's medical history
        self._current_condition = current_condition  # Initialize patient's current medical condition
        self._appointment = None  # Initialize patient's appointment as None

    #getter for name
    def get_name(self):
        return self._name

    #getter for dob
    def get_dob(self):
        return self._dob

    #getter for medical history
    def get_medical_history(self):
        return self._medical_history

    #setter for name
    def set_medical_history(self, medical_history):
        self._medical_history = medical_history

    #getter for current condition
    def get_current_condition(self):
        return self._current_condition

    #setter for current condition
    def set_current_condition(self, current_condition):
        self._current_condition = current_condition
    #getter for appointment
    def get_appointment(self):
        return self._appointment
    #setter for appointment
    def set_appointment(self, appointment):
        self._appointment = appointment


class Doctor:
    def __init__(self, name, specialty):
        self.name = name  # Initialize doctor's name
        self.specialty = specialty  # Initialize doctor's specialty


class Prescription:
    def __init__(self, medication):
        self.medication = medication  # Initialize prescription medication


class HospitalSystem:
    def __init__(self):
        self._patients = set()  # Initialize set to store patients
        self._doctors = {}  # Initialize dictionary to store doctors
        self._prescriptions = []  # Initialize list to store prescriptions
        self._consultation_queue = []  # Initialize list to store consultation queue

    def add_patient(self, patient):
        self._patients.add(patient)  # Add patient to set of patients
        self.print_patient_list()  # Print list of patients

    def schedule_appointment(self, patient, doctor):
        patient.set_appointment(doctor)  # Set appointment for patient with specified doctor
        return True

    def add_doctor(self, doctor):
        self._doctors[doctor.name] = doctor  # Add doctor to dictionary of doctors

    def add_prescription(self, prescription):
        self._prescriptions.append(prescription)  # Add prescription to list of prescriptions

    def add_to_consultation_queue(self, patient):
        self._consultation_queue.append(patient)  # Add patient to consultation queue

    def next_patient_consultation(self):
        if self._consultation_queue:
            return self._consultation_queue.pop(0)  # Get and remove next patient from consultation queue
        else:
            return None

    def remove_patient_record(self, patient):
        if patient in self._patients:
            self._patients.remove(patient)  # Remove patient from set of patients
            self.print_patient_list()  # Print list of patients
            return True
        else:
            return False

    def print_patient_list(self):
        print("Patients:")
        for patient in self._patients:
            print(patient.get_name())  # Print name of each patient in the set

    def search_patient(self, name):
        for patient in self._patients:
            if patient.get_name() == name:
                return patient  # Return patient object if found
        return None  # Return None if patient not found


def perform_registration(hospital, name, dob, medical_history, current_condition):
    # Register a new patient with provided details
    patient = Patient(name, dob, medical_history, current_condition)
    hospital.add_patient(patient)
    return patient


def schedule_patient_appointment(hospital, patient, doctor):
    print("\nScheduling appointments:")
    print(f"Appointment scheduled for patient {patient.get_name()} with doctor {doctor.name}.")


def perform_consultation(hospital):
    patient = hospital.next_patient_consultation()  # Get next patient for consultation
    if patient:
        print(f"\nConsultation started for patient {patient.get_name()}.")
        # Simulate consultation and update medical record
        patient.set_medical_history("Updated medical history during consultation")
        patient.set_current_condition("Updated condition after consultation")
        return patient
    else:
        print("\nNo patients in consultation queue.")
        return None


def issue_prescription(hospital, medication):
    # Issue a prescription for a medication
    prescription = Prescription(medication)
    hospital.add_prescription(prescription)
    print(f"Prescription issued for medication '{medication}'.")
    return prescription


def complete_consultation(hospital, patient):
    # Complete consultation for a patient
    success = hospital.remove_patient_record(patient)
    if success:
        print(f"\nConsultation completed for patient {patient.get_name()}.")
    else:
        print(f"Failed to complete consultation for patient {patient.get_name()}.")


def search_patient(hospital, name):
    # Search for a patient by name
    patient = hospital.search_patient(name)
    if patient:
        print(f"\nFound Patient: {patient.get_name()}")
        return patient
    else:
        print(f"No patient found with the name {name}")
        return None


# Test cases
if __name__ == "__main__":
    hospital = HospitalSystem()

    doctor1 = Doctor("Dr. Ali", "Cardiologist")
    doctor2 = Doctor("Dr. Abdullah", "Pediatrician")
    hospital.add_doctor(doctor1)
    hospital.add_doctor(doctor2)

    patient1 = perform_registration(hospital, "Mohammed", "1990-01-01", "None", "Fever")
    patient2 = perform_registration(hospital, "Alya", "1995-05-05", "None", "Cough")
    patient3 = perform_registration(hospital, "Ahmad", "1988-10-10", "None", "Headache")
    patient4 = perform_registration(hospital, "Fatima", "1982-03-15", "High blood pressure", "Dizziness")
    patient5 = perform_registration(hospital, "Sara", "2000-07-20", "Asthma", "Shortness of breath")

    schedule_patient_appointment(hospital, patient1, doctor1)
    schedule_patient_appointment(hospital, patient2, doctor2)
    schedule_patient_appointment(hospital, patient3, doctor1)
    schedule_patient_appointment(hospital, patient4, doctor2)
    schedule_patient_appointment(hospital, patient5, doctor1)

    hospital.add_to_consultation_queue(patient1)
    hospital.add_to_consultation_queue(patient2)
    hospital.add_to_consultation_queue(patient3)
    hospital.add_to_consultation_queue(patient4)
    hospital.add_to_consultation_queue(patient5)

    consulted_patient1 = perform_consultation(hospital)

    if consulted_patient1:
        issue_prescription(hospital, "Paracetamol")
        complete_consultation(hospital, consulted_patient1)

    consulted_patient2 = perform_consultation(hospital)

    if consulted_patient2:
        issue_prescription(hospital, "Cough syrup")
        complete_consultation(hospital, consulted_patient2)


    search_patient(hospital, "Mohammed")
    search_patient(hospital, "Alya")
    search_patient(hospital, "Ahmad")
    search_patient(hospital, "Fatima")
    search_patient(hospital, "Sara")